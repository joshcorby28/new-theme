<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    {% # Inlined CSS Variables %}
    {% render 'css-variables' %}

    {% # Load and preload the critical CSS %}
    {{ 'critical.css' | asset_url | stylesheet_tag: preload: true }}
    {{ 'fract.css' | asset_url | stylesheet_tag: preload: true }}

    {% # Preload and load fract.js %}
    <link rel="preload" as="script" href="{{ 'fract.js' | asset_url }}">
    <script src="{{ 'fract.js' | asset_url }}" defer></script>


    {% # Social, title, etc. %}
    {% render 'meta-tags' %}

    {{ content_for_header }}
  </head>

  <body id="hidden-theme">
    {% # Grunge Overlay Effect %}
    <canvas id="grain-canvas"></canvas>
    {% if settings['grunge-effect'] %}
      <script>
        const canvas = document.getElementById('grain-canvas');
        const ctx = canvas.getContext('2d');

        function resize() {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        }

        function drawNoise() {
          const imageData = ctx.createImageData(canvas.width, canvas.height);
          const buffer32 = new Uint32Array(imageData.data.buffer);
          for (let i = 0; i < buffer32.length; i++) {
            buffer32[i] = (Math.floor(Math.random() * 255) << 24) | 0xffffff;
          }
          ctx.putImageData(imageData, 0, 0);
        }

        function loop() {
          drawNoise();
          setTimeout(loop, 50);
        }

        window.addEventListener('resize', resize);
        resize();
        loop();
      </script>

      <style>
        #grain-canvas {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          pointer-events: none;
          opacity: {{settings.grain-opacity}};
          z-index: 9999;
        }
      </style>
    {% endif %}
    {% # Grunge Overlay Effect %}
    
    {% if template == 'index' %}
    {% render 'preloader' %}
    {% endif %}

    {% sections 'header-group' %}

    {% # Global %}
      <style>
        {% if settings.uppercase_headings_links %}
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          a,
          summary {
            text-transform: uppercase;
            letter-spacing: -1px;
          }
        {% endif %}
      
        {% if settings.capitalize_spans %}
          span {
            text-transform: uppercase;
            letter-spacing: -1px;
          }
        {% endif %}

        /* Buttons */
        .fract-primary {
          display: flex;
          align-items: center;
          justify-content: center;
          padding: 12px 24px;
          text-decoration: none;
          font-size: 13px;
          transition: background-color 0.3s, color 0.3s;
          cursor: pointer;
          border: none;
          white-space: nowrap;
          height: 50px;
          border-radius: 4px;
          width: fit-content;
          background: {{ settings.primary_button-bg }};
          color: {{ settings.primary_button-text }};
          letter-spacing: 0;
          text-transform: uppercase;
        }
       
        .fract-secondary {
          padding: 12px 24px;
          font-size: 13px;
          cursor: pointer;
          border: none;
          white-space: nowrap;
          font-size: 13px;
          height: 50px;
          border-radius: 4px;
          text-decoration:none;
          background: #fff;
          border:1px solid {{ settings.second_button-border }};
          width:100%;
          color: {{ settings.second_button-text }};
          letter-spacing: 0;
          text-transform: uppercase;
          display:flex;
          width: fit-content;
          align-items: center;
          justify-content: center;
        }

        .underlined-link {
          font-size:13px;
          color: {{ settings.second_button-text }};
        }

          .button-skew:hover {
            transition: transform 0.4s ease-in-out;
            transform: skew(3deg, 3deg);
          }
        
          .button-skew:hover {
            transition: transform 0.4s ease-in-out;
          }

          :root {
            --text-color: {{ settings.text_color }};
          }


      </style>

    {{ content_for_layout }}

  {% if template == 'index' or template == 'collection'  %}
    <style>
      header {
      position: absolute;
      z-index: 9;
      width: 100%;
        background:transparent;
      top:60px;
      }

      :root {
        --page-width: {{ settings.page_width | divided_by: 10 }}rem;
      }
    </style>
  {% endif %}

    {% render 'audio-player' %}

    {% sections 'footer-group' %}
  </body>
</html>
