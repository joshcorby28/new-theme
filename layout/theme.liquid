<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>
    {% # Inlined CSS Variables %}
    {% render 'css-variables' %}

    {% # Load and preload the critical CSS %}
    {{ 'critical.css' | asset_url | stylesheet_tag: preload: true }}

    {% # Social, title, etc. %}
    {% render 'meta-tags' %}

    <script src="https://cdn.jsdelivr.net/npm/grained"></script>

    {{ content_for_header }}
  </head>

  <body id="hidden-theme">
<style>
  #grain-canvas {
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none; /* so clicks go through */
    opacity: 0.08; /* adjust for subtlety */
    z-index: 9999; /* over everything */
  }
</style>

<canvas id="grain-canvas"></canvas>

<script>
  const canvas = document.getElementById('grain-canvas');
  const ctx = canvas.getContext('2d');

  function resize() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  function drawNoise() {
    const imageData = ctx.createImageData(canvas.width, canvas.height);
    const buffer32 = new Uint32Array(imageData.data.buffer);
    for(let i = 0; i < buffer32.length; i++) {
      // ARGB format: 0xAARRGGBB, here only alpha channel randomized for white noise with transparency
      buffer32[i] = (Math.floor(Math.random() * 255) << 24); 
    }
    ctx.putImageData(imageData, 0, 0);
  }

  function loop() {
    drawNoise();
    requestAnimationFrame(loop);
  }

  window.addEventListener('resize', resize);
  resize();
  loop();
</script>

    {% sections 'header-group' %}

    {{ content_for_layout }}

<script>
  const canvas = document.getElementById('grain');
  const ctx = canvas.getContext('2d');
  let width, height;

  function resize() {
    width = canvas.width = window.innerWidth;
    height = canvas.height = window.innerHeight;
  }

  function noise() {
    const imageData = ctx.createImageData(width, height);
    const buffer32 = new Uint32Array(imageData.data.buffer);
    for(let i = 0; i < buffer32.length; i++) {
      buffer32[i] = ((255 * Math.random())|0) << 24;
    }
    ctx.putImageData(imageData, 0, 0);
  }

  function loop() {
    noise();
    requestAnimationFrame(loop);
  }

  window.addEventListener('resize', resize);
  resize();
  loop();
</script>


    <style>
      .shopify-section-group-header-group {
      position: absolute;
      z-index: 9;
      width: 100%;
      }

      :root {
        --page-width: {{ settings.page_width | divided_by: 10 }}rem;
      }
    </style>

    {% sections 'footer-group' %}
  </body>
</html>
